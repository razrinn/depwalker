# Codecov configuration for depwalker
# Documentation: https://docs.codecov.com/docs/codecovyml-reference
# Validate at: https://api.codecov.io/validate

# Top-level codecov settings
codecov:
  # Require CI builds to finish before processing reports
  require_ci_to_pass: true
  
  # Max age for reports (24 hours is reasonable for most projects)
  max_report_age: 24
  
  # Wait for N builds before sending notifications
  # Since you test on 3 Node versions, wait for all
  notify:
    after_n_builds: 3
    wait_for_ci: true

# Coverage configuration
coverage:
  # Precision for coverage percentage (2 decimal places)
  precision: 2
  
  # Rounding: down, up, or nearest
  round: down
  
  # Range for coverage colors in UI
  # Red: 0-50%, Yellow: 50-70%, Green: 70-100%
  range: "50...100"
  
  # Status checks configuration
  status:
    # Project-wide coverage requirements
    project:
      default:
        # Overall project coverage (matching vitest.config.ts)
        target: 70%
        threshold: 1%  # Allow 1% drop in coverage
        base: auto  # Compare against base branch
        if_not_found: success  # Pass if no base coverage found
        if_ci_failed: error  # Fail if CI fails
        only_pulls: false  # Run on all commits, not just PRs
        informational: false  # Make this a required check
        
      # Separate check for unit tests
      unit:
        target: 70%
        threshold: 1%
        paths:
          - "src/**/*.ts"
        flags:
          - unit
        informational: false
    
    # Patch coverage (coverage of changed code)
    patch:
      default:
        # Require at least 70% coverage on new/modified code
        target: 70%
        threshold: 0%  # No threshold for patches
        base: auto
        if_not_found: success
        only_pulls: true  # Only check on PRs
        informational: false
    
    # No status check per changed file (can be noisy)
    changes: false

# Comments configuration for pull requests
comment:
  # When to post comments
  behavior: default  # Comment on PR creation and updates
  
  # Require certain coverage changes to post
  require_changes: false  # Always post comment
  require_base: false  # Post even without base coverage
  require_head: true  # Require head coverage
  
  # Layout configuration - what to show in the comment
  layout: "reach,diff,flags,files,footer"
  
  # Show coverage trends
  show_carryforward_flags: true
  show_critical_paths: false  # Don't show critical paths by default
  
  # Comment visibility
  after_n_builds: 3  # Wait for all Node version builds
  
  # Hide comment if coverage is unchanged
  hide_comment_details: false

# Path fixing - map paths if needed
# fixes:
#   - "::src/"  # Example: Fix paths to be relative to src/

# Ignore certain files/paths from coverage
ignore:
  - "**/*.d.ts"  # TypeScript declaration files
  - "**/node_modules/**"
  - "**/dist/**"  # Built files
  - "**/coverage/**"  # Coverage reports
  - "**/test/**"  # Test files themselves
  - "vitest.config.ts"
  - ".changeset/**"
  - "*.config.js"
  - "*.config.ts"
  - "src/index.ts"  # CLI entry point (as specified in vitest config)

# Flags for organizing coverage reports
flags:
  # Unit tests flag
  unit:
    paths:
      - "src/**/*.ts"
    carryforward: false  # Don't carry forward old coverage
    
  # Node version specific flags (optional)
  node18:
    carryforward: false
  
  node20:
    carryforward: false
    
  node22:
    carryforward: false

# GitHub-specific settings
github_checks:
  # Use GitHub Checks API for detailed annotations
  annotations: true

# Component configuration for organizing coverage by module
component_management:
  # Define components to track coverage per module
  default_rules:
    statuses:
      - type: project
        target: auto
        threshold: 1%
  
  individual_components:
    - component_id: analyzer
      name: Analyzer Module
      paths:
        - src/analyzer.ts
    
    - component_id: ui
      name: UI Module  
      paths:
        - src/ui.ts

# Profiling configuration (optional)
profiling:
  # Mark critical files for extra attention
  critical_files_paths:
    - src/analyzer.ts  # Core analysis logic
